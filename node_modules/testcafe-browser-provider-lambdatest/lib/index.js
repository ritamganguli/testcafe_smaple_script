'use strict';

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _wd = _interopRequireDefault(require("wd"));
var _util = require("./util");
var WEB_DRIVER_PING_INTERVAL = 30 * 1000;
_wd["default"].configureHttp({
  timeout: 15 * 60 * 1000,
  retries: -1
});
var _default = exports["default"] = {
  // Multiple browsers support

  isMultiBrowser: true,
  browserNames: [],
  openedBrowsers: {},
  _startBrowser: function _startBrowser(id, url, capabilities) {
    var _this = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var webDriver, pingWebDriver;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            (0, _util.showTrace)('StartBrowser Initiated for ', id);
            console.log('capabilities', capabilities);
            _context.next = 4;
            return _wd["default"].promiseChainRemote("https://" + _util.PROCESS_ENVIRONMENT.LT_USERNAME + ":" + _util.PROCESS_ENVIRONMENT.LT_ACCESS_KEY + "@" + _util.AUTOMATION_HUB_URL + ":443/wd/hub", 443);
          case 4:
            webDriver = _context.sent;
            if (!capabilities.isRealMobile) {
              _context.next = 9;
              break;
            }
            _context.next = 8;
            return _wd["default"].promiseChainRemote("https://" + _util.PROCESS_ENVIRONMENT.LT_USERNAME + ":" + _util.PROCESS_ENVIRONMENT.LT_ACCESS_KEY + "@" + _util.MOBILE_AUTOMATION_HUB_URL + ":443/wd/hub", 443);
          case 8:
            webDriver = _context.sent;
          case 9:
            pingWebDriver = function pingWebDriver() {
              return ping(webDriver);
            };
            (0, _util.showTrace)('webDriver ', webDriver);
            (0, _util.showTrace)('pingWebDriver', pingWebDriver);
            webDriver.once('status', function () {
              webDriver.pingIntervalId = setInterval(pingWebDriver, WEB_DRIVER_PING_INTERVAL);
              (0, _util.showTrace)('pingIntervalId', webDriver.pingIntervalId);
            });
            _this.openedBrowsers[id] = webDriver;
            (0, _util.showTrace)(capabilities);
            _context.prev = 15;
            _context.next = 18;
            return webDriver.init(capabilities).get(url);
          case 18:
            _context.next = 26;
            break;
          case 20:
            _context.prev = 20;
            _context.t0 = _context["catch"](15);
            // for (let tunnel = 0; tunnel < LT_TUNNEL_NUMBER; tunnel++) await _destroy(tunnel);
            _this.dispose();
            (0, _util.showTrace)('Error while starting browser for ', id);
            (0, _util.showTrace)(_context.t0);
            throw _context.t0;
          case 26:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[15, 20]]);
    }))();
  },
  _takeScreenshot: function _takeScreenshot(id, screenshotPath) {
    var _this2 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
      var base64Data;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _this2.openedBrowsers[id].takeScreenshot();
          case 2:
            base64Data = _context2.sent;
            _context2.next = 5;
            return (0, _util._saveFile)(screenshotPath, base64Data);
          case 5:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }))();
  },
  // Required - must be implemented
  // Browser control
  openBrowser: function openBrowser(id, pageUrl, browserName) {
    var _this3 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      var tunnel, capabilities, sessionUrl;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(!_util.PROCESS_ENVIRONMENT.LT_USERNAME || !_util.PROCESS_ENVIRONMENT.LT_ACCESS_KEY)) {
              _context3.next = 2;
              break;
            }
            throw new Error(_util.LT_AUTH_ERROR);
          case 2:
            tunnel = 0;
          case 3:
            if (!(tunnel < _util.LT_TUNNEL_NUMBER)) {
              _context3.next = 9;
              break;
            }
            _context3.next = 6;
            return (0, _util._connect)(tunnel);
          case 6:
            tunnel++;
            _context3.next = 3;
            break;
          case 9:
            _context3.next = 11;
            return (0, _util._parseCapabilities)(id, browserName);
          case 11:
            capabilities = _context3.sent;
            if (!(capabilities instanceof Error)) {
              _context3.next = 16;
              break;
            }
            (0, _util.showTrace)('openBrowser error on  _parseCapabilities', capabilities);
            _this3.dispose();
            throw capabilities;
          case 16:
            _context3.next = 18;
            return _this3._startBrowser(id, pageUrl, capabilities);
          case 18:
            sessionUrl = " " + _util.AUTOMATION_DASHBOARD_URL + "/logs/?sessionID=" + _this3.openedBrowsers[id].sessionID + " ";
            (0, _util.showTrace)('sessionURL', sessionUrl);
            _this3.setUserAgentMetaInfo(id, sessionUrl);
          case 21:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }))();
  },
  closeBrowser: function closeBrowser(id) {
    var _this4 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            (0, _util.showTrace)('closeBrowser Initiated for ', id);
            if (!_this4.openedBrowsers[id]) {
              _context4.next = 19;
              break;
            }
            (0, _util.showTrace)(_this4.openedBrowsers[id].sessionID);
            clearInterval(_this4.openedBrowsers[id].pingIntervalId);
            if (!_this4.openedBrowsers[id].sessionID) {
              _context4.next = 15;
              break;
            }
            _context4.prev = 5;
            _context4.next = 8;
            return _this4.openedBrowsers[id].quit();
          case 8:
            _context4.next = 13;
            break;
          case 10:
            _context4.prev = 10;
            _context4.t0 = _context4["catch"](5);
            (0, _util.showTrace)(_context4.t0);
          case 13:
            _context4.next = 17;
            break;
          case 15:
            (0, _util.showTrace)('SessionID not found for ', id);
            (0, _util.showTrace)(_this4.openedBrowsers[id]);
          case 17:
            _context4.next = 20;
            break;
          case 19:
            (0, _util.showTrace)('Browser not found in OPEN STATE for ', id);
          case 20:
          case "end":
            return _context4.stop();
        }
      }, _callee4, null, [[5, 10]]);
    }))();
  },
  // Optional - implement methods you need, remove other methods
  // Initialization
  init: function init() {
    var _this5 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (0, _util._getBrowserList)();
          case 2:
            _this5.browserNames = _context5.sent;
          case 3:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }))();
  },
  dispose: function dispose() {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
      var tunnel;
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            (0, _util.showTrace)('Dispose Initiated ...');
            _context6.prev = 1;
            tunnel = 0;
          case 3:
            if (!(tunnel < _util.LT_TUNNEL_NUMBER)) {
              _context6.next = 9;
              break;
            }
            _context6.next = 6;
            return (0, _util._destroy)(tunnel);
          case 6:
            tunnel++;
            _context6.next = 3;
            break;
          case 9:
            _context6.next = 15;
            break;
          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](1);
            (0, _util.showTrace)('Error while destroying ...');
            (0, _util.showTrace)(_context6.t0);
          case 15:
            (0, _util.showTrace)('Dispose Completed');
          case 16:
          case "end":
            return _context6.stop();
        }
      }, _callee6, null, [[1, 11]]);
    }))();
  },
  // Browser names handling
  getBrowserList: function getBrowserList() {
    var _this6 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", _this6.browserNames);
          case 1:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }))();
  },
  isValidBrowserName: function isValidBrowserName() {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", true);
          case 1:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }))();
  } /* browserName */,
  // Extra methods
  resizeWindow: function resizeWindow(id, width, height) {
    var _this7 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
      var _windowHandle;
      return _regenerator["default"].wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _this7.openedBrowsers[id].windowHandles();
          case 2:
            _windowHandle = _context9.sent;
            _context9.next = 5;
            return _this7.openedBrowsers[id].windowSize(_windowHandle, width, height);
          case 5:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }))();
  },
  maximizeWindow: function maximizeWindow(id) {
    var _this8 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10() {
      var _windowHandle;
      return _regenerator["default"].wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _this8.openedBrowsers[id].windowHandles();
          case 2:
            _windowHandle = _context10.sent;
            _context10.next = 5;
            return _this8.openedBrowsers[id].maximize(_windowHandle);
          case 5:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    }))();
  },
  takeScreenshot: function takeScreenshot(id, screenshotPath) {
    var _this9 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11() {
      return _regenerator["default"].wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _this9._takeScreenshot(id, screenshotPath);
          case 2:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    }))();
  },
  reportJobResult: function reportJobResult(id, jobResult, jobData) {
    var _this10 = this;
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12() {
      var sessionID;
      return _regenerator["default"].wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            if (!(_this10.openedBrowsers[id] && _this10.openedBrowsers[id].sessionID)) {
              _context12.next = 5;
              break;
            }
            sessionID = _this10.openedBrowsers[id].sessionID;
            _context12.next = 4;
            return (0, _util._updateJobStatus)(sessionID, jobResult, jobData, _this10.JOB_RESULT);
          case 4:
            return _context12.abrupt("return", _context12.sent);
          case 5:
            return _context12.abrupt("return", null);
          case 6:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    }))();
  }
};
function handlePingError(err, res) {
  if (err) {
    (0, _util.showTrace)('ping error :');
    (0, _util.showTrace)(err);
  } else {
    (0, _util.showTrace)('ignore ping response :');
    (0, _util.showTrace)(res);
  }
}
function ping(webDriver) {
  webDriver.safeExecute(1, handlePingError);
}
module.exports = exports.default;